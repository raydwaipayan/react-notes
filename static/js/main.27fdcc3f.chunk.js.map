{"version":3,"sources":["components/notes.jsx","components/addNote.jsx","components/appBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Note","state","title","_this","props","text","id","_this2","this","react_default","a","createElement","Card_default","CardContent_default","Typography_default","color","gutterBottom","variant","CardActions_default","Button_default","size","onClick","onDelete","Component","NoteField","handleChange","event","setState","Object","defineProperty","target","value","noValidate","autoComplete","TextField_default","label","onChange","margin","appBar","AppBar_default","position","Toolbar_default","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleDelete","notes","filter","note","handleDeleteAll","handleAdd","index","length","newNote","concat","push","console","log","Paper_default","components_appBar","addNote","map","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27fdcc3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nclass Note extends Component{\n    state={\n        title: this.props.title,\n        text: this.props.text,\n        id: this.props.id\n    }\n\n    render(){\n        return(\n          <Card>\n            <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>\n                    {this.state.title}\n                </Typography>\n                <Typography color=\"black\" variant=\"h5\">\n                    {this.state.text}    \n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\" onClick={()=>this.props.onDelete(this.state.id)}>Delete</Button>\n            </CardActions>\n          </Card>  \n        )\n    }\n}\n\nexport default Note;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\n\nclass NoteField extends Component{\n    state={\n        text:\"\",\n        title:\"\"\n    }\n    handleChange = text => event => {\n        this.setState({\n          [text]: event.target.value,\n        });\n      };\n    render()\n    {\n        return (\n            <Card>\n                <CardContent>\n                    <form noValidate autoComplete=\"off\">\n                    <TextField\n                        id=\"new-note\"\n                        label=\"Note\"\n                        value={this.state.text}\n                        onChange={this.handleChange('text')}\n                        margin=\"normal\"\n                        variant=\"filled\"\n                    />\n                </form>\n                </CardContent>\n                <CardActions>\n                    <Button size=\"small\" onClick={()=>this.props.onClick({text: this.state.text})}>Add</Button>\n                    <Button size=\"small\" onClick={this.props.onDelete}>Delete All</Button>\n                </CardActions>\n        </Card>\n        )\n    }\n}\nexport default NoteField;","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport ToolBar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nclass appBar extends Component{\n    render(){\n        return (\n            <div>\n                <AppBar position=\"static\" color=\"default\">\n                    <ToolBar>\n                        <Typography variant=\"h6\" color=\"inherit\">\n                            Notes\n                        </Typography>\n                    </ToolBar>\n                </AppBar>\n            </div>\n        )\n    };\n}\n\n\n  \nexport default appBar;","import React, { Component } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Note from './components/notes';\nimport NoteField from './components/addNote';\nimport AppBar from './components/appBar';\n\nclass App extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            notes:[]\n        };\n    }\n    handleDelete= id=>\n    {\n        this.setState({notes: this.state.notes.filter(note=> note.id!==id)});\n    }\n    handleDeleteAll=()=>{\n        this.setState({notes:[]});\n    }\n    handleAdd= note=>   \n    {\n        let index=0;\n        if(this.state.notes.length!==0)\n            index=this.state.notes[this.state.notes.length-1].id;\n        index++;\n        let newNote={\n            id: index,\n            text: note.text,\n            title: `Note ${index}`,\n        }\n        var notes=this.state.notes;\n        notes.push(newNote);\n        this.setState({notes: notes});\n        console.log(this.state);\n    }\n\n    render(){\n        return (\n            <Paper>\n            <div>\n                <AppBar/>\n                <NoteField onClick={this.handleAdd} onDelete={this.handleDeleteAll} />\n            </div>\n            <div>\n                {this.state.notes.map(note=>\n                    {\n                        console.log(this.state);\n                        return(\n                            <Note\n                                id={note.id}\n                                key={note.id}\n                                text={note.text}\n                                title={note.title}\n                                onDelete={this.handleDelete}\n                            />\n                        )\n                    })}\n            </div>\n            </Paper>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}